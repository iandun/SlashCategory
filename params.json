{"name":"SlashCategory","tagline":"A Categorical Data Format","body":"What Is SlashCategory?\r\n======================\r\n\r\nSlashCategory is a simple, no frills, human readable file format that is based on data organized into categories, with each piece of data and each category separated by a foward slash (hence the same SlashCategory).\r\n\r\nTechnical Details\r\n=================\r\n\r\nSlashCategory is organized like the following:\r\n\r\n`category/data/category/data`\r\n\r\nAlthough, in reality, there is no distinction between categories and data.\r\n\r\nFor example, take the example:\r\n\r\n`book/Lord Of The Flies/author/William Golding`\r\n\r\nIf we want to get the title of the book, we want to get the data under the `book` category, which would return the data `Lord Of The Flies`.\r\n\r\nBut if we want to get the author of the book, `Lord Of The Flies` just turns into another category, as to get the author of the book, we want to get it under the category `book/Lord Of The Flies/author`\r\n\r\nEach line of data is known as a data entry. For example, there are 6 data entries in the following:\r\n\r\n\tPage/Title/Server Query Info\r\n\tOmniCraft/Api/ServerQuery/NumPlayers/1\r\n\tOmniCraft/Api/ServerQuery/MaxPlayers/20\r\n\tOmniCraft/Api/ServerQuery/Version/1.7.2\r\n\tOmniCraft/Api/ServerQuery/NumPlayers/1\r\n\tOmniCraft/Api/Request/Status/Success\r\n\r\nParsing It\r\n==========\r\n\r\nThe format is a relatively simple one. I have built a no-frills PHP parser (because I originally started using this format with web applications). It's pretty easy to use. Just use the getData function:\r\n\r\n`function getData($data, $pattern);`\r\n\r\nWhere:\r\n\r\n`$data` is the data you want to parse.\r\n\r\n`$pattern` is the category the data you want to retrieve is under.\r\n\r\n\r\nHere's an example:\r\n\r\n\t<?php\r\n\r\n\tinclude_once 'SlashCategoryParse.php';\r\n\r\n\t$data = \"book/Lord Of The Flies/author/William Golding\";\r\n\r\n\techo \"Book Title: \" . getData($data, \"book\")[0] . \" Book Author: \" . getData($data, \"book/Lord Of The Flies/author\")[0];\r\n\r\n\t?>\r\n\r\nYou'll notice that getData() returns an array. This is used if more than one data entry is found under one category, like in the example below:\r\n\r\n\tPage/Title/Book Information\r\n\tPage/Description/A list of some books and their authors\r\n\tbook/title/Lord Of The Flies/author/William Golding\r\n\tbook/title/Around The World In 80 Days/author/Jules Verne\r\n\tbook/title/Robinson Crusoe/author/Daniel Defoe\r\n\r\nThere are three data entries under the category `book/title`. This can be useful. The example below uses this functionality to create a table displaying book names and their respective authors:\r\n\r\n\t<?php\r\n\tinclude_once 'data-parse.php';\r\n\r\n\r\n\r\n\t$data = \"Page/Title/Book Information\" . \"\\nPage/Description/A list of some books and their authors\" . \"\\nbook/title/Lord Of The Flies/author/William Golding\" . \"\\nbook/title/Around The World In 80 Days/author/Jules Verne\" . \"\\nbook/title/Robinson Crusoe/author/Daniel Defoe\";\r\n\r\n\t$bookTitleArray = getData($data, \"book/title\");\r\n\r\n\techo \"<h1>\" . getData($data, \"Page/Title\")[0] . \"</h1>\";\r\n\techo \"<p><b>\" . getData($data, \"Page/Description\")[0] . \"</b></p>\";\r\n\r\n\techo \"<table border='1'>\";\r\n\techo \"\\n<tr><td>Book Title</td><td>Book Author</td></tr>\";\r\n\tforeach($bookTitleArray as $title)\r\n\t{\r\n\t\techo \"\\n<tr>\\n\";\r\n\t\techo \"<td>\" . $title . \"</td><td>\" . getData($data, \"book/title/\" . $title . \"/author\")[0] . \"</td>\";\r\n\t\techo \"\\n</tr>\";\r\n\t}\r\n\r\n\techo \"</table>\";\r\n\r\n\techo \"<p>This page generated from the following data:</p>\";\r\n\techo \"<pre>\" . $data . \"</pre>\";\r\n\r\n\t?>\r\n\r\nWhich will produce the following HTML page:\r\n\r\n![Resulting HTML Page](http://i.imgur.com/JQq3AMV.png?1)\r\n\t\r\nI have also successfully used this parser using data retrieved from a cURL request, and a file.\r\n\r\nCommon Mistakes\r\n===============\r\n\r\n`/book/title/Around The World In 80 Days/author/Jules Verne`\r\nNo Slashes At The Beginning Of A Data Entry\r\n\r\n`getData($data, \"book/title/\")`\r\nNever put an ending slash at the end of `$pattern`.\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}